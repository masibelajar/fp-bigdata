version: '3.8'

networks:
  default:
    driver: bridge

services:
  # PostgreSQL - Optimized, not removed
  postgres:
    image: postgres:13-alpine
    environment:
      POSTGRES_DB: amazon_reviews
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
    command: postgres -c max_connections=50 -c shared_buffers=64MB -c effective_cache_size=128MB

  # MinIO - Full featured, low resource
  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: password123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'

  # Zookeeper - Optimized
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      KAFKA_HEAP_OPTS: "-Xmx128M -Xms64M"
    ports:
      - "2181:2181"
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'

  # Kafka - Low resource but full featured
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_HEAP_OPTS: "-Xmx256M -Xms128M"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "9092:9092"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Spark Master - Full featured, optimized memory
  spark-master:
    build: ./services/spark_processor
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_OPTS="-Xmx512m -XX:MaxMetaspaceSize=128m"
      - SPARK_DAEMON_MEMORY=256m
    ports:
      - "8080:8080"
      - "7077:7077"
    volumes:
      - ./services:/opt/bitnami/spark/services
      - ./data:/opt/bitnami/spark/data
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '0.5'

  # Spark Worker - Reduced but functional
  spark-worker:
    build: ./services/spark_processor
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=512M
      - SPARK_WORKER_CORES=1
      - SPARK_WORKER_OPTS="-Xmx512m -XX:MaxMetaspaceSize=128m"
      - SPARK_EXECUTOR_MEMORY=256m
    volumes:
      - ./services:/opt/bitnami/spark/services
      - ./data:/opt/bitnami/spark/data
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '0.5'

  # API - Keep hybrid ML, optimize resources
  api:
    build: ./app
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - minio
      - kafka
    volumes:
      - ./app:/app
      - ./services:/app/services
    environment:
      - PYTHONPATH=/app
      - LITE_MODE=true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Dashboard - Full featured, low resource
  dashboard:
    build: ./services/dashboard
    ports:
      - "8501:8501"
    depends_on:
      - api
    volumes:
      - ./services:/app/services
    environment:
      - LITE_MODE=true
      - API_BASE_URL=http://api:8000
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'

  # MinIO Producer - Keep but optimize
  minio-producer:
    build: ./services/minio_producer
    depends_on:
      - minio
      - kafka
    environment:
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=admin
      - MINIO_SECRET_KEY=password123
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - BATCH_SIZE=100
      - SLEEP_INTERVAL=30
    volumes:
      - ./data:/app/data
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

  # Stream Consumer - Keep but lightweight
  stream-consumer:
    build: ./services/stream_consumer
    depends_on:
      - kafka
      - postgres
      - api
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=amazon_reviews
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
      - API_BASE_URL=http://api:8000
      - BATCH_SIZE=50
      - COMMIT_INTERVAL=10
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'

volumes:
  postgres_data:
  minio_data: